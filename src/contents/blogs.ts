import { Blog } from "@/types/index";

export const blogs: Blog[] = [
  {
    title: "Understanding React Fiber",
    excerpt:
      "Learn how React Fiber solves UI lag by breaking rendering into smaller tasks.",
    date: "2024-03-18",
    readTime: "9 min read",
    slug: "understanding-react-fiber",
    content: [
      {
        type: "text",
        content:
          "ุฒูุงู React ูุงูุช ุจุชุณุชุฎุฏู ูุธุงู ุงุณูู Stack Reconciler ุนุดุงู ุชุญุฏุซ ุงูู UIุ ุจุณ ูุงู ุนูุฏูุง ูุดููุฉ ูุจูุฑุฉโฆ ุฃู ุชุญุฏูุซ ูุงู ูุงุฒู ูุฎูุต ููู ูุฑุฉ ูุงุญุฏุฉ ุงูุงูู. ุฏู ูุนูุงู ุฅู ูู ุญุตู ุชุญุฏูุซ ุชูููุ ุงูุตูุญุฉ ูููุง ุจุชุฌูุฏ ูุนุงู.",
      },
      {
        type: "text",
        content:
          "ุงููุดุงูู ุงูุฃุณุงุณูุฉ ูุน Stack Reconciler:\n\n- ุฃู ุชุญุฏูุซ ูุงุฒู ูุฎูุต ุจุงููุงููุ ุญุชู ูู ูุงู ุชููู.\n- ูููุด ุชุฃุฌูู: ุงููุชุงุจุฉ ูู input ูููู ุชุชุฃุฎุฑ.\n- ูู ุงูุชุญุฏูุซุงุช ุจููุณ ุงูุฃููููุฉ.",
      },
      {
        type: "text",
        content:
          "ูู ุจุตูุช ุนูู ุงูููุฏ ุฏู ูุชููู ุฅูู ุงููู ุจูุญุตู ูุน Stack Reconciler:",
      },
      {
        type: "code",
        language: "javascript",
        content: `import { useState } from "react";

const products = new Array(1000).fill(0).map((_, i) => \`Product \${i + 1}\`);

function App() {
  const [list, setList] = useState([]);

  const handleClick = () => {
    setList(products); // ุชุญุฏูุซ ูุจูุฑ ูุฑุฉ ูุงุญุฏุฉ = ุชูููุฌ
  };

  return (
    <div>
      <button onClick={handleClick}>ุญูู ุงูููุชุฌุงุช</button>
      <input type="text" placeholder="ุงูุชุจ ููุง" className="border p-2 block my-2" />
      {list.map((item, index) => (
        <p key={index}>{item}</p>
      ))}
    </div>
  );
}

export default App;`,
      },
      {
        type: "text",
        content:
          "ููุง ุชุถุบุท ุนูู ุงูุฒุฑุ React ุจุชุญุงูู ุชุนุฑุถ 1000 ููุชุฌ ูุฑุฉ ูุงุญุฏุฉ ูุฏู ุจูููุฌ ุงูุตูุญุฉ. ุฃู ุถุบุท ุฃู ูุชุงุจุฉ ุฃุซูุงุก ุงูุชุญุฏูุซ ูุด ููุชููุฐ ุจุณุฑุนุฉ.",
      },
      {
        type: "text",
        content:
          "React Fiber ุฌู ูุญู ุงููุดููุฉ:\n\n- ุจููุณู ุงูุชุญุฏูุซุงุช ููุฑุงุญู ุตุบูุฑุฉ.\n- ุจูุฏู ุฃููููุฉ ููุฃุญุฏุงุซ ุงููููุฉ ุฒู ุงูููููุงุช ูุงููุชุงุจุฉ.\n- ููุฏุฑ ูููู ุงูุชุญุฏูุซุงุช ุงูุชูููุฉ ููููููุง ุจุนุฏูู.",
      },
      {
        type: "text",
        content:
          "ุงูุฎูุงุตุฉ: Fiber ุฎูุง ุงูุชุญุฏูุซุงุช ูุฑูุฉ ูุณูุณุฉุ ูุฎููู React ุชูุฏุฑ ุชุฏูุฑ ุงูุฃููููุงุช ุจุดูู ุฐูู.",
      },
    ],
    lang: "ar",
  },

  {
    title: "React Performance Optimization with Memoization",
    excerpt:
      "Learn how to optimize React apps using React.memo and useCallback to prevent unnecessary re-renders.",
    date: "2024-04-12",
    readTime: "7 min read",
    slug: "react-performance-optimization-ar",
    content: [
      {
        type: "text",
        content:
          "ูู ุดุบุงู ุจู React ููุด ูุงุฎุฏ ุจุงูู ูู ุงูุฃุฏุงุก ูุฅูุช ุฒู ุงููู ุณุงูู ุนุฑุจูุฉ ูุฏุงูุณ ูุฑุงูู ููู ูุงูุฑ ุฅูู ุจูุฒูุฏ ุจูุฒูู! ๐",
      },
      {
        type: "text",
        content:
          "ูุชูุฑ ุจุชุญุณ ุฅู ุงููููุน ุชููู ุฑุบู ุฅู ุงูููุฏ ุดููู ุดุบุงู ุชูุงู ูุงูุณุจุจ ูุง ูุนูู ุฅู ูู ููููุงุช ุจุชุนูู ุฅุนุงุฏุฉ Render ุนูู ุงููุงุถู.",
      },
      {
        type: "text",
        content:
          "ุฎูููู ุฃูููู ุฅูุชู ุจูุญุตู ุงูู reRender:\n\n- ุฃู Component ูู React ุจูุนูู reRender ูู ุงูู state ุฃู props ุจุชุงุนุชู ุงุชุบูุฑุช.\n- ูู ุงูุฃุจ (Parent Component) ุนูู re-renderุ ูู ุงูุฃููุงุฏ (Child Components) ูุชุนูู re-render ูุนุงู ุญุชู ูู ูููุด ุชุบููุฑ ุญูููู ูู ุงูู props.",
      },
      {
        type: "text",
        content: "ุทูุจ ูุฏู ูุญููุง ุฅุฒุงูุ",
      },
      {
        type: "text",
        content: "ุฃููุงู: React.memo()",
      },
      {
        type: "text",
        content:
          "ูู ุนูุฏู Component ูุด ูุญุชุงุฌ ูุนูู re-render ุบูุฑ ููุง props ุจุชุงุนุชู ุชุชุบูุฑ ูุนูุงูุ ูุชูู ุงูู component ุฏู ุจู React.memo(). ูุฏู ุงูู Component ูุด ููุนูู re-render ุนูู ุงููุงุถู ูููุชุนูู re-render ุจุณ ููุง data ุชุชุบูุฑ.",
      },
      {
        type: "code",
        language: "javascript",
        content: `const MyComponent = React.memo(({ data }) => {
  console.log("Rendered!");
  return <div>{data}</div>;
});`,
      },
      {
        type: "text",
        content: "ุซุงููุงู: useCallback()",
      },
      {
        type: "text",
        content:
          "ูู ุนูุฏู function ุจุชุชุจุนุช ูู prop ููููู ุชุงููุ ูู ูุฑุฉ ุงูุฃุจ ููุนูู re-render ุงูู function ุจุชุชุนุงุฏ ุฅูุดุงุฆูุง ูุฏู ุจูุฎูู ุงูู child ูุนูู re-render ูู ููุงู. ูููุง ููุฌู ุฏูุฑ useCallback().",
      },
      {
        type: "code",
        language: "javascript",
        content: `import { useCallback } from "react";

const handleClick = useCallback(() => {
  console.log("Clicked!");
}, []);`,
      },
      {
        type: "text",
        content:
          "ูุฏู handleClick ูุด ูุชุชุบูุฑ ุจูู ูู render ูุงูุชุงููุ ูุฏู ูุญู ุงููุดููุฉ.",
      },
      {
        type: "text",
        content:
          "ุงูุฎูุงุตุฉ:\n\n- ุงุณุชุฎุฏู React.memo() ุนุดุงู ุชููุน ุฅุนุงุฏุฉ ุงูู render ุงููู ูุงููุงุด ูุงุฒูุฉ.\n- ุงุณุชุฎุฏู useCallback() ุนูุดุงู ุชุญุงูุธ ุนูู ุซุจุงุช functions ูุชุญุณู ุงูุฃุฏุงุก.",
      },
    ],
    lang: "ar",
  },
  {
    title: "React Performance: Beyond React.memo and useCallback",
    excerpt:
      "Discover the real reasons behind slow React apps and how to boost performance by managing code and data loading effectively.",
    date: "2024-04-15",
    readTime: "8 min read",
    slug: "react-performance-beyond-memo",
    content: [
      {
        type: "text",
        content:
          "ุนุฒูุฒู ูุทูุฑ Reactุ ูู ุญุณูุช ุจุจุทุก ูู ุชุทุจูููุ ุฃูู ุญุงุฌุฉ ุจุชููุฑ ูููุง ูู ุฃุฏูุงุช ุฒู React.memoุ useMemoุ ู useCallback. ูุจุชุญุณ ุฅูู ูุฏู ุจุชุญูู ุฃุนูู ูุณุชููุงุช ุงูุชุญุณูู! ๐",
      },
      {
        type: "text",
        content:
          "ููู ุงูุญูููุฉุ ุงููุณุชุฎุฏู ูุด ูููุชุญ ุงููููุน ููููู 'ุงููู! ุฏู ุนุฏุฏ ุงูู renders ูููู!' ูู ุจุณ ุนุงูุฒ ุชุทุจูู ุณุฑูุน ูุณููุณ. ุงูุฃุฏูุงุช ุฏู ูููู ุชููู ุญููู ูู ุจุนุถ ุงูุญุงูุงุชุ ููู ุงูุจุทุก ุงูุญูููู ุณุจุจู ูุด ุจุณ ุฅุนุงุฏุฉ ุงูู renders. ุฏู ูุฌุฑุฏ ุฃุฏูุงุช ุชุญุณูู ูุด ูู ุงูุณุฑุนุฉ ุงูุญููููุฉ!",
      },
      {
        type: "text",
        content: "ุงูุฃุณุจุงุจ ุงููู ูุนููุง ุชุจุทุฃ ุงูุชุทุจูู:",
      },
      {
        type: "text",
        content:
          "- ุชุฃุฎุฑ ุชุญููู ุงูููุฏ ุฃู ุงูุจูุงูุงุช ุงูุฃุณุงุณูุฉ.\n- ุงูุตูุฑ ุจุชุธูุฑ ูุฌุฃุฉ ูุจุชุณุจุจ ูุดููุฉ ูู ุชูุณูู ุงูุตูุญุฉ (Layout Shift).\n- ุงูุจูุงูุงุช ุจุชุชุฃุฎุฑ ุฌุฏูุง ูู ุงููุตูู ูุงููุณุชุฎุฏู ุจูุณุชูู ูุชูุฑ.\n- Scroll ุชููู ุจุณุจุจ ุตูุฑ ุถุฎูุฉ ุฃู ุนูุงุตุฑ ูุชูุฑ ุฌุฏูุง ูู ุงูู DOM.\n- ุชุญููู ุงูุฌุงูุงุณูุฑูุจุช ุงูุฃุณุงุณูุฉ ุจูุงุฎุฏ ููุช ูุจูุฃุฎุฑ ุชูุงุนู ุงููุณุชุฎุฏู.",
      },
      {
        type: "text",
        content: "ุทูุจ ุฅูู ุงููู ูุฎูู ุงูุชุทุจูู ุณุฑูุน ุจุฌุฏุ",
      },
      {
        type: "text",
        content:
          "ุงูุญุงุฌุงุช ุงููู ุจุชุญุณู ุงูุฃุฏุงุก ูุนูุงู:\n\n1. ุชุญููู ุงูุนูุงุตุฑ ุงูุฃุณุงุณูุฉ ุงูุฃูู.\n2. ุงุณุชุฎุฏุงู Lazy Loading ูุชูุณูู ุงูููุฏ.\n3. ุงุณุชุฎุฏุงู Suspense ูุน ููุชุจุงุช ุฒู React Query ุฃู SWR.\n4. ุชุซุจูุช ุงูู Layout ุจุงุณุชุฎุฏุงู ุฃุจุนุงุฏ ุงูุตูุฑ ูุงูููุฏูููุงุช.\n5. ุชุฃุฌูู ุชุญููู ุงูุฌุงูุงุณูุฑูุจุช ุงูุบูุฑ ุถุฑูุฑูุฉ.\n6. ุชุฎุฒูู ุงูู state ูุญูู ูู ุงููููุจูููุช ูู ูุด ูุญุชุงุฌ ูููู global.",
      },
      {
        type: "text",
        content:
          "ุงูุฎูุงุตุฉ: ุจูุงุด ุชุฑููุฒ ุจุณ ุนูู ุชูููู ุงูู rendersุ ุฑููุฒ ุนูู ุชุญุณูู ุชุญููู ุงูููุฏ ูุงูุจูุงูุงุช. ุฏู ุงููู ูุฎูู ุงูุชุทุจูู ูุนูุงู ุณุฑูุน.",
      },
    ],
    lang: "ar",
  },
  {
    title: "Improving React Performance with useTransition",
    excerpt:
      "Learn how to use useTransition to split updates and defer heavy tasks to keep the UI responsive.",
    date: "2024-04-18",
    readTime: "5 min read",
    slug: "react-usetransition-performance",
    content: [
      {
        type: "text",
        content:
          "ุญุงุณุณ ุฅู ุงูุฃุฏุงุก ูุด ุฃุญุณู ุญุงุฌุฉ ูู ุงูุชุทุจููุงุช ุงููู ุจุชุนูููุงุ ุงูู UI ุจูุชูู ูุจููุฑูุฒ ูุน ุงูุชุญุฏูุซุงุช ุงููุจูุฑุฉุ ุชุนุงูู ุฃูููู ุนูู Hook ูู React ููุณุงุนุฏู: useTransition ๐ฅท๐ผ",
      },
      {
        type: "text",
        content:
          "ุงูู useTransition ูู React Hook ุจุชุณุชุฎุฏู ูุชุฃุฌูู ุจุนุถ ุงูุชุญุฏูุซุงุช ุนุดุงู ุชุณูุจ ุงูุชุญุฏูุซุงุช ุงููููุฉ ุชุชููุฐ ุงูุฃูู.",
      },
      {
        type: "text",
        content:
          "ุชุฎูู ุฅู ุนูุฏู input ููุจุญุซ ูู Array ูุจูุฑุฉ ูุนุงูุฒ ุชุนุฑุถ ุงููุชุงูุฌ ูุจุงุดุฑุฉ. ุงูููุฏ ููููู ุจุงูุดูู ุฏู:",
      },
      {
        type: "code",
        language: "javascript",
        content: `import { useState, useTransition } from 'react';
function SearchComponent() {
  const [searchText, setSearchText] = useState('');
  const [filteredData, setFilteredData] = useState(data);
  const [isPending, startTransition] = useTransition();

  function handleSearch(e) {
    // ุชุญุฏูุซ ุนุงุฌู - ููุฑู
    setSearchText(e.target.value);
    
    // ุชุญุฏูุซ ุบูุฑ ุนุงุฌู - ูููู ุชุฃุฌููู
    startTransition(() => {
      setFilteredData(
        data.filter(item =>
          item.includes(e.target.value)
        )
      );
    });
  }

  return (
    <>
      <input value={searchText} onChange={handleSearch} />
      {isPending && <div>ุฌุงุฑู ุงูุจุญุซ...</div>}
      <ul>
        {filteredData.map(item => <li key={item}>{item}</li>)}
      </ul>
    </>
  );
}`,
      },
      {
        type: "text",
        content: "ูู ุนูููุฉ ุงูุจุญุซ ุฏูุ ุจูุญุตู ุชุญุฏูุซูู ูุน ุจุนุถ:",
      },
      {
        type: "text",
        content:
          "1. ุชุญุฏูุซ ูุต ุงูุจุญุซ ุฏุงุฎู ุงูู input โ ูุงุฒู ูููู ููุฑู.\n2. ุชุญุฏูุซ ุงูุจูุงูุงุช ูุชุตููุชูุง โ ูููู ูุชุฃุฌู ุดููุฉ.",
      },
      {
        type: "text",
        content:
          "ูู ุบูุฑ useTransitionุ ุชุญุฏูุซ ุงููุชุงุจุฉ ููุชุฃุฎุฑ ูุญุฏ ูุง ุงูุชุตููุฉ ุชุฎูุต ูุฏู ุจูุฃุซุฑ ุนูู ุงูุณุฑุนุฉ.",
      },
      {
        type: "text",
        content: "ููุง ููุฌู ุฏูุฑ useTransition:",
      },
      {
        type: "text",
        content:
          "useTransition ุจุชูุณู ุงูุชุญุฏูุซุงุช ุฅูู:\n\n- ุชุญุฏูุซุงุช ุนุงุฌูุฉ: ุฒู ุชุญุฏูุซ ูุต ุงูุจุญุซ.\n- ุชุญุฏูุซุงุช ุบูุฑ ุนุงุฌูุฉ: ุฒู ุชุตููุฉ ุงูุจูุงูุงุช.",
      },
      {
        type: "text",
        content:
          "React ุจุชููู ุฅู ุงูุชุญุฏูุซุงุช ุงููู ุฌูู startTransition ูููู ุชุชุฃุฌู ูู ููู ุญุงุฌุฉ ุฃูู ุจุชุญุตู ูู ููุณ ุงูููุช.",
      },
      {
        type: "text",
        content: "ูุฏู ุจูุฎูู ุงูุฃุฏุงุก ุฃูุถู ูุงูุชุทุจูู ุฃุณุฑุน ูู ุบูุฑ ูุง ูุญุตู ุชูููุฌ.",
      },
    ],
    lang: "ar",
  },
];

export default blogs;
